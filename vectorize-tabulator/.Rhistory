ac = my_tree$left_arg$ac,
it = my_tree$left_arg$it)
# set the new values in the labelled phrase
rlang::exec(my_tree$Set, !!!new_values, filterFun = isRoot)
# remove the moved values
my_tree$left_arg$ft <- ""
my_tree$left_arg$ac <- ""
}
# renew domination counts
my_tree$Set(n_dominator = 0)
my_tree %<>% recurse()
return(my_tree)
}
# agree function, compare ft and ac features of the last siblings
Agree <- function(input_tree){
# clone tree to remove connections
my_tree <- Clone(input_tree)
# agree left
left_ac <- unlist(str_split(my_tree$left_arg$ac, "-"))
lefter_ft <- unlist(str_split(my_tree$right_arg$ft, "-"))
if (any(left_ac == lefter_ft)){ # sometimes ac is completely empty, check if there is any match
match_number <- which(left_ac == lefter_ft)
left_ac[match_number] <- "0" # turn matches into 0 in ac
lefter_ft[match_number] <- "0" # turn matches into 0 in feats
my_tree$left_arg$ac <- paste(left_ac, collapse = "-")
my_tree$right_arg$ft <- paste(lefter_ft, collapse="-")
}
# agree right
right_ac <- unlist(str_split(my_tree$right_arg$ac, "-"))
righter_ft <- unlist(str_split(my_tree$left_arg$ft, "-"))
if (any(right_ac == righter_ft)){ # sometimes ac is completely empty, check if there is any match
match_number <- which(right_ac == righter_ft)
right_ac[match_number] <- "0"
righter_ft[match_number] <- "0"
my_tree$right_arg$ac <- paste(right_ac,collapse = "-")
my_tree$left_arg$ft <- paste(righter_ft, collapse = "-")
}
return(my_tree)
}
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %T>% print("lb","it","mc","ft","ac","n_dominator")
?label
?merge
?Merge
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator")
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator")
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i) Merge(i, my_num[[1]]))
comnbine_2[[1]] %>% print("it","mc","lb","ft","ac","n_dominator")
comnbine_2[[2]] %>% print("it","mc","lb","ft","ac","n_dominator")
comnbine_2[[1]] %>% print("it","mc","lb","ft","ac","n_dominator")
comnbine_2[[2]] %>% print("it","mc","lb","ft","ac","n_dominator")
1 == NA
1 == NULL
1 == 0
any(1 == NA)
any(1 == NULL)
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
# MERGE CONDITION CONSTRAINT, iteratively check downwards
cons_merge <- function(my_tree){
violations <- 0
# check if tree has children
if (isNotLeaf(my_tree)){
# check left
left_mc <- my_tree$left_arg$mc %>% str_split(",") %>% unlist() %>% as.integer()
for_left_lb <- my_tree$right_arg$lb
if (any(for_left_lb == left_mc, na.rm = T)){
NULL
} else if (is.na(left_mc) || is_empty(left_mc)){
NULL
} else {violations %<>% +1}
# check right
right_mc <- my_tree$right_arg$mc %>% str_split(",") %>% unlist() %>% as.integer()
for_right_lb <- my_tree$left_arg$lb
if (any(for_right_lb == right_mc, na.rm = T)){
NULL
} else if (is.na(right_mc) || is_empty(right_mc)){
NULL
} else {violations %<>% +1}
# return head result by recursing
return(violations + cons_merge(my_tree$left_arg) + cons_merge(my_tree$right_arg))
}
# return result for leaf node
return(violations)
}
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator")
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i) Merge(i, my_num[[1]]))
comnbine_2[[2]] %>% print("it","mc","lb","ft","ac","n_dominator")
comnbine_2[[2]] %>% cons_merge()
comnbine_2[[2]]$mc
comnbine_2[[3]]$mc
comnbine_2[[3]]$mc %>% str_split(",")
comnbine_2[[3]]$mc %>% str_split(",") %>% unlist()
unlist(str_split(comnbine_2[[3]]$mc, ","))
unlist(str_split(comnbine_2[[3]]$mc, ",")) == 1
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator")
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i) Merge(i, my_num[[1]]))
comnbine_2[[2]] %>% print("it","mc","lb","ft","ac","n_dominator")
comnbine_2[[2]] %>% merge_cons()
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator")
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i) Merge(i, my_num[[1]]))
comnbine_2[[2]] %>% print("it","mc","lb","ft","ac","n_dominator")
comnbine_2[[2]] %>% merge_cons()
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
my_num[[1]]$range_id
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator")
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i) Merge(i, my_num[[1]]))
comnbine_2[[2]] %>% print("it","mc","lb","ft","ac","n_dominator", "range_id")
trial
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","n_dominator")
trial$leaves
?append
my_tree <- Clone(trial)
my_tree
my_tree$leaves
input_numeration <- my_num
append(input_numeration, my_tree$leaves)
# add tree leaves to the numeration
my_numeration <- append(input_numeration, my_tree$leaves)
trial
my_num[-c(1,2)]
lapply(my_num, function(i) i$range_id)
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
lapply(my_num, function(i) i$range_id)
input_numeration
input_numeration <- my_num
my_tree
my_tree <- Clone(trial)
my_tree
# add tree leaves to the numeration
my_numeration <- append(input_numeration, my_tree$leaves)
which(input_numeration %in% my_tree$leaves)
input_numeration
my_tree$leaves
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
input_numeration <- my_num
my_tree <- Clone(trial)
which(input_numeration %in% my_tree$leaves)
which(input_numeration == my_tree$leaves)
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]])
trial$pass_numeration <- my_num
trial$pass_numeration
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[-c(1,i)]})
my_num[-i]
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[-i]})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[[-i]]})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[[-1]]})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$output_numeration <- my_num[[-1]]}))
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$output_numeration <- my_num[[-1]])})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[[-1]]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-1]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-c(1,i)]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-i]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-1]))})
comnbine_2[[1]]$output_num
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(i$Set(output_num = my_num[-1]), Merge(i, my_num[[1]])
)})
comnbine_2[[1]]$output_num
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){Merge(i, my_num[[1]])})
comnbine_2[[1]]$output_num
comnbine_2[[1]]$mc
comnbine_2[[1]]$it
comnbine_2[[1]]
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
i$Set(output_numn = my_num[-1]) %>%
Merge(i, my_num[[1]])})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
i$Set(output_num = my_num[-1]) %>%
Merge(i, my_num[[1]])})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])})
comnbine_2[[1]]$it
# add output numeration to each tree
combine_1 <- lapply(my_num, function(i){Set(i, output_num = my_num[-i])})
?Setg
?Set
# add output numeration to each tree
combine_1 <- lapply(my_num, function(i) Set(i, output_num = my_num[-i]))
lapply(my_num, function(i) i$range_id)
# add output numeration to each tree
combine_1 <- lapply(my_num, function(i) i$Set(output_num = my_num[[-i]]))
?seq_along
seq_along()
seq_along(my_num)
lapply(seq_along(my_num), function(i) my_num[i]$range_id)
lapply(seq_along(my_num), function(i) my_num[[i]]$range_id)
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$Set(output_num = my_num[[-i]]))
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$trial <- "x")
my_num[[3]]$trial
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$trial <- ifelse(i>1,"y","x"))
my_num[[3]]$trial
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$trial <- ifelse(i>3,"y","x"))
my_num[[3]]$trial
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$output_num <- my_num[[-i]])
my_num[[-1]]
my_num[-1]
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$output_num <- my_num[-i])
combine[[1]]$it
combine_1[[1]]$it
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
# bake numeration
bake_numeration <- function(left_arg, right_arg, numeration){
my_tree <- Merge(left_arg, right_arg)
my_tree$output_num <- numeration[[]]
}
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") #%>%
#Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
#Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$output_num <- my_num[-i])
View(combine_1)
combine_1[[1]]
combine_1[[2]]
combine_1[[3]]
combine_1[[4]]
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
# bake numeration
bake_numeration <- function(left_arg, right_arg, numeration){
my_tree <- Merge(left_arg, right_arg)
my_tree$output_num <- numeration[[]]
}
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") #%>%
#Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
#Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
View(my_num)
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$Set("output_num" = my_num[-i]))
View(combine_1)
combine_1[[1]]
combine_1[[1]]$it
combine_1[[1]]$output_num
combine_1[[1]]$output_num$it
combine_1[[1]]$output_num[1]
