copy = my_tree$Get("is_copy"), n_doms = my_tree$Get("n_dominator")) %>% # get copy and domination counts
mutate(copy = copy, . = ifelse(.$copy == 1, 0, .))
sqrt(4)
tibble(acs = my_tree$Get("ac"), feats = my_tree$Get("ft"), # get the marked feats and agreements
copy = my_tree$Get("is_copy"), n_doms = my_tree$Get("n_dominator")) %>% # get copy and domination counts
mutate_all(funs(ifelse(copy == 1, 0, .)))
?mutate_At
?mutate_at
tibble(acs = my_tree$Get("ac"), feats = my_tree$Get("ft"), # get the marked feats and agreements
copy = my_tree$Get("is_copy"), n_doms = my_tree$Get("n_dominator")) %>% # get copy and domination counts
mutate_at(vars(acs,feats), fun(ifelse(copy == 1,"",.)))
tibble(acs = my_tree$Get("ac"), feats = my_tree$Get("ft"), # get the marked feats and agreements
copy = my_tree$Get("is_copy"), n_doms = my_tree$Get("n_dominator")) %>% # get copy and domination counts
mutate_at(vars(acs,feats), funs(ifelse(copy == 1,"",.)))
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]]) %>% agreeMC() %>% labelMC()
my_list <- list()
moveMC(my_tree)
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","copy","feats","ac")
violations <- tibble(acs = my_tree$Get("ac"), feats = my_tree$Get("ft"), # get the marked feats and agreements
copy = my_tree$Get("is_copy"), n_doms = my_tree$Get("n_dominator")) %>% # get copy and domination counts
mutate_at(vars(acs,feats), funs(ifelse(copy == 1,"",.))) %>% #remove feats if it is a copied element
tidyr::separate(col = feats, into = c("case","foc","wh"), sep = "-", fill = "right") %>% # separate feats into columns
tidyr::separate(col = acs, into = c("case_agr","foc_agr","wh_agr"), sep = "-", fill = "right") %>% # separate feats into columns
mutate_all(funs(as.numeric(as.integer(.)))) %>% replace(is.na(.),0) %>% # turn into numeric values and fill missing
mutate_at(vars(1:7), funs(. * n_doms)) %>% dplyr::select(-n_doms) %>% # multiply each row by domination count
summarise(case_agr = sum(case_agr), foc_agr = sum(foc_agr), wh_agr = sum(wh_agr),
case = sum(case),foc = sum(foc), wh = sum(wh), copy = sum(copy)) # summarise the eval
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]]) %>% agreeMC() %>% labelMC()
my_list <- list()
moveMC(my_tree)
s
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]]) %>% agreeMC() %>% labelMC()
my_list <- list()
moveMC(my_tree)
my_tree <- Clone(my_list[[4]])
violations <- tibble(acs = my_tree$Get("ac"), feats = my_tree$Get("ft"), # get the marked feats and agreements
copy = my_tree$Get("is_copy"), n_doms = my_tree$Get("n_dominator")) %>% # get copy and domination counts
mutate_at(vars(acs,feats), funs(ifelse(copy == 1,"",.))) %>% #remove feats if it is a copied element
tidyr::separate(col = feats, into = c("case","foc","wh"), sep = "-", fill = "right") %>% # separate feats into columns
tidyr::separate(col = acs, into = c("case_agr","foc_agr","wh_agr"), sep = "-", fill = "right") %>% # separate feats into columns
mutate_all(funs(as.numeric(as.integer(.)))) %>% replace(is.na(.),0) %>% # turn into numeric values and fill missing
mutate_at(vars(1:7), funs(. * n_doms)) %>% dplyr::select(-n_doms) %>% # multiply each row by domination count
summarise(case_agr = sum(case_agr), foc_agr = sum(foc_agr), wh_agr = sum(wh_agr),
case = sum(case),foc = sum(foc), wh = sum(wh), copy = sum(copy)) # summarise the eval
my_tree %>% print("it","n_dominator","copy","feats","ac")
violations
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]]) %>% agreeMC() %>% labelMC()
my_list <- list()
moveMC(my_tree)
my_tree <- Clone(my_list[[4]])
violations <- tibble(acs = my_tree$Get("ac"), feats = my_tree$Get("ft"), # get the marked feats and agreements
copy = my_tree$Get("is_copy"), n_doms = my_tree$Get("n_dominator")) %>% # get copy and domination counts
mutate_at(vars(acs,feats), funs(ifelse(copy == 1,"",.))) %>% #remove feats if it is a copied element
tidyr::separate(col = feats, into = c("case","foc","wh"), sep = "-", fill = "right") %>% # separate feats into columns
tidyr::separate(col = acs, into = c("case_agr","foc_agr","wh_agr"), sep = "-", fill = "right") %>% # separate feats into columns
mutate_all(funs(as.numeric(as.integer(.)))) %>% replace(is.na(.),0) %>% # turn into numeric values and fill missing
mutate_at(vars(1:7), funs(. * n_doms)) %>% dplyr::select(-n_doms) %>% # multiply each row by domination count
summarise(case_agr = sum(case_agr), foc_agr = sum(foc_agr), wh_agr = sum(wh_agr),
case = sum(case),foc = sum(foc), wh = sum(wh), copy = sum(copy)) # summarise the eval
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
violations
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]]) %>% agreeMC() %>% labelMC()
my_list <- list()
moveMC(my_tree)
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
my_tree %>% cons_marked()
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
x <- c(0,1,1)
y <- c(0,0,1)
which(x == y)
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]]) #%>% agreeMC() %>% labelMC()
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
my_tree
my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
lefter_ft <- my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_pos <- my_tree$left_arg$Get("range_id")[1]
any(left_ac == right_ft)
any(left_ac == lefter_ft)
left_ac[which(left_ac == lefter_ft)]
left_ac[which(left_ac == lefter_ft)] <- "0"
left_ac
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
left_ac
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
# AGREE FUNCTION, agreement is carried out under motherhood recursively down the tree
agreeMC <- function(my_tree){
if(isLeaf(my_tree)){# if it is a leaf, return tree
return(my_tree)} else {
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
lefter_ft <- my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_l <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac == lefter_ft)){ # sometimes ac is completely empty, check if there is any match
left_ac[which(left_ac == lefter_ft)] <- "0"
my_tree$left_arg$Set(ac = left_ac, filterFun = function(x) x$range_id == node_l)
}
# agree right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
righter_ft <- my_tree$left_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_r <- my_tree$right_arg$Get("range_id")[1]
if (any(right_ac == righter_ft)){ # sometimes ac is completely empty, check if there is any match
right_ac[which(right_ac == righter_ft)] <- "0"
my_tree$right_arg$Set(ac = right_ac, filterFun = function(x) x$range_id == node_r)
}
# recurse on the child nodes
agreeMC(my_tree$left_arg)
agreeMC(my_tree$right_arg)
return(my_tree)
}
}
my_tree %>% agreeMC() %>% print("it","n_dominator","is_copy","ft","ac")
right_ac
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
lefter_ft <- my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_l <- my_tree$left_arg$Get("range_id")[1]
left_ac
left_ac[which(left_ac == lefter_ft)] <- "0"
left_ac
left_ac %>% paste0(sep = "-")
left_ac %>% paste0(sep = "-", collapse = T)
?paste0
left_ac %>% paste(sep = "-")
left_ac %>% paste(collapse = "-")
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
# AGREE FUNCTION, agreement is carried out under motherhood recursively down the tree
agreeMC <- function(my_tree){
if(isLeaf(my_tree)){# if it is a leaf, return tree
return(my_tree)} else {
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
lefter_ft <- my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_l <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac == lefter_ft)){ # sometimes ac is completely empty, check if there is any match
left_ac[which(left_ac == lefter_ft)] <- "0"
left_ac %<>% paste(collapse = "-")
my_tree$left_arg$Set(ac = left_ac, filterFun = function(x) x$range_id == node_l)
}
# agree right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
righter_ft <- my_tree$left_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_r <- my_tree$right_arg$Get("range_id")[1]
if (any(right_ac == righter_ft)){ # sometimes ac is completely empty, check if there is any match
right_ac[which(right_ac == righter_ft)] <- "0"
right_ac %<>% paste(collapse = "-")
my_tree$right_arg$Set(ac = right_ac, filterFun = function(x) x$range_id == node_r)
}
# recurse on the child nodes
agreeMC(my_tree$left_arg)
agreeMC(my_tree$right_arg)
return(my_tree)
}
}
my_tree %>% agreeMC() %>% print("it","n_dominator","is_copy","ft","ac")
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
# AGREE FUNCTION, agreement is carried out under motherhood recursively down the tree
agreeMC <- function(my_tree){
if(isLeaf(my_tree)){# if it is a leaf, return tree
return(my_tree)} else {
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
lefter_ft <- my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_l <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac == lefter_ft)){ # sometimes ac is completely empty, check if there is any match
left_ac[which(left_ac == lefter_ft)] <- "0"
left_ac %<>% paste(collapse = "-")
my_tree$left_arg$Set(ac = left_ac, filterFun = function(x) x$range_id == node_l)
}
# agree right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
righter_ft <- my_tree$left_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_r <- my_tree$right_arg$Get("range_id")[1]
if (any(right_ac == righter_ft)){ # sometimes ac is completely empty, check if there is any match
right_ac[which(right_ac == righter_ft)] <- "0"
right_ac %<>% paste(collapse = "-")
my_tree$right_arg$Set(ac = right_ac, filterFun = function(x) x$range_id == node_r)
}
# recurse on the child nodes
agreeMC(my_tree$left_arg)
agreeMC(my_tree$right_arg)
return(my_tree)
}
}
my_tree %>% agreeMC() %>% print("it","n_dominator","is_copy","ft","ac")
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
# AGREE FUNCTION, agreement is carried out under motherhood recursively down the tree
agreeMC <- function(my_tree){
if(isLeaf(my_tree)){# if it is a leaf, return tree
return(my_tree)} else {
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
lefter_ft <- my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_l <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac == lefter_ft)){ # sometimes ac is completely empty, check if there is any match
left_ac[which(left_ac == lefter_ft)] <- "0"
left_ac %<>% paste(collapse = "-")
my_tree$left_arg$Set(ac = left_ac, filterFun = function(x) x$range_id == node_l)
}
# agree right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
righter_ft <- my_tree$left_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_r <- my_tree$right_arg$Get("range_id")[1]
if (any(right_ac == righter_ft)){ # sometimes ac is completely empty, check if there is any match
right_ac[which(right_ac == righter_ft)] <- "0"
right_ac %<>% paste(collapse = "-")
my_tree$right_arg$Set(ac = right_ac, filterFun = function(x) x$range_id == node_r)
}
# recurse on the child nodes
agreeMC(my_tree$left_arg)
agreeMC(my_tree$right_arg)
return(my_tree)
}
}
my_tree2 <- Clone(my_tree)
my_tree %>% agreeMC() %>% print("it","n_dominator","is_copy","ft","ac")
my_tree == my_tree2
all(my_tree2$Get("ac") == my_tree$Get("ac"))
library(tidyverse)
library(magrittr)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
my_list <- list()
mergeMC("DP1","V",numeration = df) %>% labelMC() %>% mergeMC("v", df) %>% labelMC() %>% moveMC()
my_tree <- Clone(my_list[[4]])
my_tree %>% print("it","n_dominator","is_copy","ft","ac")
# AGREE FUNCTION, agreement is carried out under motherhood recursively down the tree
agreeMC <- function(my_tree){
if(isLeaf(my_tree)){# if it is a leaf, return tree
return(my_tree)} else {
# agree left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
lefter_ft <- my_tree$right_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_l <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac == lefter_ft)){ # sometimes ac is completely empty, check if there is any match
left_ac[which(left_ac == lefter_ft)] <- "0"
left_ac %<>% paste(collapse = "-")
my_tree$left_arg$Set(ac = left_ac, filterFun = function(x) x$range_id == node_l)
}
# agree right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split("-") %>% unlist()
righter_ft <- my_tree$left_arg$Get("ft")[1] %>% str_split("-") %>% unlist()
node_r <- my_tree$right_arg$Get("range_id")[1]
if (any(right_ac == righter_ft)){ # sometimes ac is completely empty, check if there is any match
right_ac[which(right_ac == righter_ft)] <- "0"
right_ac %<>% paste(collapse = "-")
my_tree$right_arg$Set(ac = right_ac, filterFun = function(x) x$range_id == node_r)
}
# recurse on the child nodes
agreeMC(my_tree$left_arg)
agreeMC(my_tree$right_arg)
return(my_tree)
}
}
my_tree2 <- Clone(my_tree)
#my_tree %>% agreeMC() %>% print("it","n_dominator","is_copy","ft","ac")
all(my_tree2$Get("ac") == my_tree$Get("ac"))
