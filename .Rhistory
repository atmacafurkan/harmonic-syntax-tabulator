library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output, -candidate))) %>% lapply(as.matrix)
tableaux
View(tableaux)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output, -candidate)))# %>% lapply(as.matrix)
View(tableaux)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output, -candidate))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
View(frequencies)
probabilities <- sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1)) %>% # calculate harmony values on negative terms
sapply(function(the_element) exp(the_element)/sum(exp(the_element))) %>% # calculate the probability of each candidate
lapply(function(x) {colnames(x) <- "probabilities"; x}) # rename the resulting column as probabilities
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output, -candidate))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
probabilities <- sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1)) %>% # calculate harmony values on negative terms
sapply(function(the_element) exp(the_element)/sum(exp(the_element))) %>% # calculate the probability of each candidate
lapply(function(x) {colnames(x) <- "probabilities"; x}) # rename the resulting column as probabilities
probabilities <- sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1))
x <- rep(0,length(4:15))
probabilities <- sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1)) %>% # calculate harmony values on negative terms
sapply(function(the_element) exp(the_element)/sum(exp(the_element))) %>% # calculate the probability of each candidate
lapply(function(x) {colnames(x) <- "probabilities"; x}) # rename the resulting column as probabilities
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
View(tableaux)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
View(tableaux)
tableaux[["[T_f:case DP2_a:case[DP2 v[DP1 v[v V[V DP1c]]]]]"]]
View(tableaux[["[T_f:case DP2_a:case[DP2 v[DP1 v[v V[V DP1c]]]]]"]])
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
x <- rep(0,length(4:15))
probabilities <- sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1)) %>% # calculate harmony values on negative terms
sapply(function(the_element) exp(the_element)/sum(exp(the_element))) %>% # calculate the probability of each candidate
lapply(function(x) {colnames(x) <- "probabilities"; x}) # rename the resulting column as probabilities
View(frequencies)
View(tableaux)
View(tableaux[["[C T[T DP2[DP2 v[DP1 v[v V[V DP1c]]]]]]"]])
length(4:15)
constraints
constraints
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
x <- rep(0,length(4:15))
probabilities <- sapply(tableaux, function(the_element) the_element[,4:15] %*% (x*-1)) %>% # calculate harmony values on negative terms
sapply(function(the_element) exp(the_element)/sum(exp(the_element))) %>% # calculate the probability of each candidate
lapply(function(x) {colnames(x) <- "probabilities"; x}) # rename the resulting column as probabilities
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
x <- rep(0,length(4:15))
probabilities <- sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1)) %>% # calculate harmony values on negative terms
sapply(function(the_element) exp(the_element)/sum(exp(the_element))) %>% # calculate the probability of each candidate
lapply(function(x) {colnames(x) <- "probabilities"; x}) # rename the resulting column as probabilities
tableaux[[1]]
tableaux[[1]][,1]
View(tableaux[[1]][,1])
View(tableaux[[1]][,4:15])
View(tableaux[[1]][,constraints])
tableaux[[1]][,constraints] %*% -1
?%*%
tableaux[[1]][,constraints] * -1
tableaux[[1]][,constraints] * (-1)
tableaux[[1]][,constraints] %*% (-1)
tableaux[[1]][,constraints] %*% as.matrix(-1)
(x*-1)
x <- rep(1,length(4:15))
(x*-1)
tableaux[[1]][,constraints] %*% (x*-1)
?diag
diag(x*-1)
tableaux[[1]][,constraints] %*% diag(x*-1)
tableaux[[1]][,constraints]
diag(x*-1)
tableaux[[1]][,constraints] %*% (x*-1)
tableaux[[1]][,constraints] %*% (x*-1)
tableaux[[1]][,constraints] %*% (x*-1)
trial <- tableaux[[1]][,constraints]
mode(trial)
trial <- as.matrix(tableaux[[1]][,constraints])
mode(trial)
lapply(trial, class)
trial <- as.matrix(tableaux[[1]][,constraints])
trial
library(mlbench)
data(BreastCancer)
X <- as.matrix(BreastCancer[, 1:10])
mode(X)
View(trial)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(as.matrix)
View(tableaux)
View(tableaux[["[C T[T DP2[DP2 v[DP1 v[v V[V DP1c]]]]]]"]])
my_trial <- tableaux[["[C T[T DP2[DP2 v[DP1 v[v V[V DP1c]]]]]]"]]
mode(my_trial)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
unlisted_matrix <- function(x){unlist(x) %>% as.matrix()}
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(unlisted_matrix)
my_trial <- tableaux[["[C T[T DP2[DP2 v[DP1 v[v V[V DP1c]]]]]]"]]
mode(my_trial)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# make sure constructed matrices are not lists
unlisted_matrix <- function(x){unlist(x) %>% as.matrix()}
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(unlisted_matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux,function(x){x[,"winner"]})
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# make sure constructed matrices are not lists
unlisted_matrix <- function(x){unlist(x) %>% as.matrix()}
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(unlisted_matrix)
View(tableaux)
tableaux[["[C T[T DP2[DP2 v[DP1 v[v V[V DP1c]]]]]]"]]
View(tableaux)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(unlist)
View(tableaux)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(as.matrix)
View(tableaux)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux, function(x){x[,"winner"]})
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(as.matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux, function(x){x[,"winner"]})
x <- rep(1,length(4:15))
sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1))
tableaux[[1]]
mode(tableaux[[1]])
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate)))
mode(tableaux[[1]])
tableaux[[1]] %>% as.matrix()
mode(tableaux[[1]] %>% as.matrix())
?as.matrix
mode(tableaux[[1]] %>% unlist() %>% as.matrix())
tableaux[[1]] %>% unlist() %>% as.matrix()
tableaux[[1]] %>% as.data.frame()
tableaux[[1]] %>% as.data.frame() %>% as.matrix()
mode(tableaux[[1]] %>% as.data.frame() %>% as.matrix())
l <- tableaux[[1]] %>% as.data.frame()
View(l)
l <- tableaux[[1]] %>% as.data.frame() %>% data.matrix()
?data.matrix
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
constraints <- colnames(df_eval)[4:15]
# make sure constructed matrices are not lists
unlisted_matrix <- function(x){as.data.frame(x) %>% data.matrix()}
# turn data frame into a list of matrices where each matrix is a single derivation
tableaux <- df_eval %>% split(.$input) %>% map(~ (.x %>% dplyr::select(-input,-output,-operation,-candidate))) %>% lapply(unlisted_matrix)
# frequencies of the candidates for each derivation
frequencies <- lapply(tableaux, function(x){x[,"winner"]})
x <- rep(1,length(4:15))
probabilities <- sapply(tableaux, function(the_element) the_element[,constraints] %*% (x*-1)) %>% # calculate harmony values on negative terms
sapply(function(the_element) exp(the_element)/sum(exp(the_element))) %>% # calculate the probability of each candidate
lapply(function(x) {colnames(x) <- "probabilities"; x}) # rename the resulting column as probabilities
View(probabilities)
probabilities[["[C T[T DP2[DP2 v[DP1 v[v V[V DP1c]]]]]]"]]
probabilities[["[DP1 v[v V[V DP1c]]]"]]
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
View(df_eval)
my_trial <- weight_optimize(df_eval, c(4:15))
View(my_trial)
my_trial$value
my_trial$convergence
my_trial$message
my_trial[["par"]]
?optim
my_trial$par
optimized_weights <- my_trial$par
names(optimized_weights) <- colnames(df_eval)[4:15]
optimized_weights
install.packages("optimParallel")
?detectCores
??detectCores
library(parallel)
detectCores()
?makeCluster
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(optimParallel)
library(parallel)
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
weight_optimize <- function(the_tableaux, constraints){ # turn the optimizing into a function to be used
# anything other than "input" and "output" vector for the data frame "the_tableaux" should be a numeric value.
# the data frame should only include the vectors for input, output, frequency, and constraint violations
n_constraint <- length(constraints) # how many constraints are there?
# box optimization
optimal_weights <- optimParallel(par = rep(0, n_constraint), # starting values for the weights is 0
fn = objective_KL, # objective function
cl = makeCluster(detectCores()/2), # use half of the cores to optimize
my_tableaux = the_tableaux, # argument to be passed to the objective function
constraint_range = constraints, # the range of constraints in the table
lower = rep(0, n_constraint), # the lowest that the constraint weights can get
upper = rep(100, n_constraint), # the highest that the constraint weights can get
method = "L-BFGS-B") # the method of optimization which allows lower bound
# return the resulting optimization
return(optimal_weights)
}
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
my_trial <- weight_optimize(df_eval, c(4:15))
?setDefaultCluster
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(optimParallel)
library(parallel)
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
weight_optimize <- function(the_tableaux, constraints){ # turn the optimizing into a function to be used
# anything other than "input" and "output" vector for the data frame "the_tableaux" should be a numeric value.
# the data frame should only include the vectors for input, output, frequency, and constraint violations
n_constraint <- length(constraints) # how many constraints are there?
cores_to_use <- makeCluster(detectCores()/2) # use half of the cores for optimizing
setDefaultCluster(cores_to_use) # set cluster
# box optimization
optimal_weights <- optimParallel(par = rep(0, n_constraint), # starting values for the weights is 0
fn = objective_KL, # objective function
my_tableaux = the_tableaux, # argument to be passed to the objective function
constraint_range = constraints, # the range of constraints in the table
lower = rep(0, n_constraint), # the lowest that the constraint weights can get
upper = rep(100, n_constraint), # the highest that the constraint weights can get
method = "L-BFGS-B") # the method of optimization which allows lower bound
# return the resulting optimization
return(optimal_weights)
}
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
my_trial <- weight_optimize(df_eval, c(4:15))
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(optimParallel)
library(parallel)
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(optimParallel)
library(parallel)
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
weight_optimize <- function(the_tableaux, constraints){ # turn the optimizing into a function to be used
# anything other than "input" and "output" vector for the data frame "the_tableaux" should be a numeric value.
# the data frame should only include the vectors for input, output, frequency, and constraint violations
n_constraint <- length(constraints) # how many constraints are there?
cores_to_use <- makeCluster(detectCores()/2) # use half of the cores for optimizing
setDefaultCluster(cores_to_use) # set cluster
library(tidyverse)
library(magrittr)
library(philentropy)
# box optimization
optimal_weights <- optimParallel(par = rep(0, n_constraint), # starting values for the weights is 0
fn = objective_KL, # objective function
my_tableaux = the_tableaux, # argument to be passed to the objective function
constraint_range = constraints, # the range of constraints in the table
lower = rep(0, n_constraint), # the lowest that the constraint weights can get
upper = rep(100, n_constraint), # the highest that the constraint weights can get
method = "L-BFGS-B") # the method of optimization which allows lower bound
# return the resulting optimization
return(optimal_weights)
}
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
my_trial <- weight_optimize(df_eval, c(4:15))
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(vtree)        # to export trees as png files
source("harmonic_syntax.R")
my_files <- list.files(path = "./basic_numeration/", pattern = "*.rds$", full.names = T)
df_eval <- readRDS(my_files[4])
my_trial <- weight_optimize(df_eval, c(4:15))
optimized_weights <- my_trial$par
names(optimized_weights) <- colnames(df_eval)[4:15]
optimized_weights
warnings()
