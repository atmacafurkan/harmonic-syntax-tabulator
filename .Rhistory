library(tidyverse)
library(magrittr)
library(data.tree)
source("./updated_gen_functions.R")
df <- read_csv("basic_numeration.csv")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
plot(output)
print(output,"it","n_dominator")
my_list <- list()
moveMC(output)
my_tree <- Clone(my_list[[4]]) %>% labelMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
plot(my_tree)
my_tree
plot(my_tree)
my_tree$Get("ft", filterFun = isRoot)[1]
my_tree$Get("ft", filterFun = isRoot)[1] %>% str_split(",") %>% unlist()
my_tree$Get("ft")[1]
my_tree$left_ac$Get("ac")[1]
my_tree$left_arg$Get("ac")[1]
my_tree$left_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
my_tree$left_arg$Get("range_id")[1]
any(left_ac %in% head_ft)
# take mother relations
head_ft <- my_tree$Get("ft")[1] %>% str_split(",") %>% unlist()
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
left_id <- my_tree$left_arg$Get("range_id")[1]
any(left_ac %in% head_ft)
which(left_ac %in% head_ft)
which(left_ac %in% head_ft)
library(tidyverse)
library(magrittr)
library(data.tree)
source("./updated_gen_functions.R")
df <- read_csv("basic_numeration.csv")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
plot(output)
print(output,"it","n_dominator")
my_list <- list()
moveMC(output)
my_tree <- Clone(my_list[[4]]) %>% labelMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
plot(my_tree)
# AGREE FUNCTION, agreement is carried out under motherhood
agreeMC <- function(my_tree){
if(my_tree$leafCount>1){
# take mother relations
head_ft <- my_tree$Get("ft")[1] %>% str_split(",") %>% unlist()
# agreement on the left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
left_id <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeL <- which(left_ac %in% head_ft)
left_ac <- left_ac[-to_removeL]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == left_id})
agreeMC(my_tree$left_arg)
} else {
agreeMC(my_tree$left_arg)
}
# agreement on the right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
right_id <- my_tree$right_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeR <- which(right_ac %in% head_ft)
right_ac <- right_ac[-to_removeR]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == right_id})
agreeMC(my_tree$right_arg)
} else {
agreeMC(my_tree$right_arg)
}
}
}
my_tree %>% agreeMC()
my_tree
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
?is_empty
library(tidyverse)
library(magrittr)
library(data.tree)
source("./updated_gen_functions.R")
df <- read_csv("basic_numeration.csv")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
plot(output)
print(output,"it","n_dominator")
my_list <- list()
moveMC(output)
my_tree <- Clone(my_list[[4]]) %>% labelMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
library(tidyverse)
library(magrittr)
library(data.tree)
source("./updated_gen_functions.R")
df <- read_csv("basic_numeration.csv")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
plot(output)
print(output,"it","n_dominator")
my_list <- list()
moveMC(output)
my_tree <- Clone(my_list[[4]]) %>% labelMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
plot(my_tree)
# AGREE FUNCTION, agreement is carried out under motherhood
agreeMC <- function(my_tree){
if(my_tree$leafCount>1){
# take mother relations
head_ft <- my_tree$Get("ft")[1] %>% str_split(",") %>% unlist()
# agreement on the left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
left_id <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeL <- which(left_ac %in% head_ft)
left_ac <- left_ac[-to_removeL]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == left_id})
agreeMC(my_tree$left_arg)
} else {
agreeMC(my_tree$left_arg)
}
# agreement on the right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
right_id <- my_tree$right_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeR <- which(right_ac %in% head_ft)
right_ac <- right_ac[-to_removeR]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == right_id})
agreeMC(my_tree$right_arg)
} else {
agreeMC(my_tree$right_arg)
}
}
}
my_tree %>% agreeMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
library(tidyverse)
library(magrittr)
library(data.tree)
source("./updated_gen_functions.R")
df <- read_csv("basic_numeration.csv")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
plot(output)
print(output,"it","n_dominator")
my_list <- list()
moveMC(output)
my_tree <- Clone(my_list[[4]]) %>% labelMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
plot(my_tree)
# AGREE FUNCTION, agreement is carried out under motherhood
agreeMC <- function(trouble_tree){
my_tree <- Clone(trouble_tree)
if(my_tree$leafCount>1){
# take mother relations
head_ft <- my_tree$Get("ft")[1] %>% str_split(",") %>% unlist()
# agreement on the left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
left_id <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeL <- which(left_ac %in% head_ft)
left_ac <- left_ac[-to_removeL]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == left_id})
agreeMC(my_tree$left_arg)
} else {
agreeMC(my_tree$left_arg)
}
# agreement on the right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
right_id <- my_tree$right_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeR <- which(right_ac %in% head_ft)
right_ac <- right_ac[-to_removeR]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == right_id})
agreeMC(my_tree$right_arg)
} else {
agreeMC(my_tree$right_arg)
}
trouble_tree
} else {
trouble_tree
}
}
my_tree %>% agreeMC()
library(tidyverse)
library(magrittr)
library(data.tree)
source("./updated_gen_functions.R")
df <- read_csv("basic_numeration.csv")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
plot(output)
print(output,"it","n_dominator")
my_list <- list()
moveMC(output)
my_tree <- Clone(my_list[[4]]) %>% labelMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
plot(my_tree)
# AGREE FUNCTION, agreement is carried out under motherhood
agreeMC <- function(trouble_tree){
my_tree <- Clone(trouble_tree)
if(my_tree$leafCount>1){
# take mother relations
head_ft <- my_tree$Get("ft")[1] %>% str_split(",") %>% unlist()
# agreement on the left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
left_id <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeL <- which(left_ac %in% head_ft)
left_ac <- left_ac[-to_removeL]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == left_id})
agreeMC(my_tree$left_arg)
} else {
agreeMC(my_tree$left_arg)
}
# agreement on the right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
right_id <- my_tree$right_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeR <- which(right_ac %in% head_ft)
right_ac <- right_ac[-to_removeR]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == right_id})
agreeMC(my_tree$right_arg)
} else {
agreeMC(my_tree$right_arg)
}
trouble_tree
} else {
trouble_tree
}
}
my_tree %>% agreeMC() %>% print("it","lb","ft","ac","is_copy", "range_id","n_dominator")
library(tidyverse)
library(magrittr)
library(data.tree)
source("./updated_gen_functions.R")
df <- read_csv("basic_numeration.csv")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
plot(output)
print(output,"it","n_dominator")
my_list <- list()
moveMC(output)
my_tree <- Clone(my_list[[4]]) %>% labelMC()
print(my_tree,"it","lb","ft","ac","is_copy", "range_id","n_dominator")
plot(my_tree)
# AGREE FUNCTION, agreement is carried out under motherhood
agreeMC <- function(trouble_tree){
my_tree <- Clone(trouble_tree)
if(my_tree$leafCount>1){
# take mother relations
head_ft <- my_tree$Get("ft")[1] %>% str_split(",") %>% unlist()
# agreement on the left
left_ac <- my_tree$left_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
left_id <- my_tree$left_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeL <- which(left_ac %in% head_ft)
left_ac <- left_ac[-to_removeL]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == left_id})
agreeMC(my_tree$left_arg)
} else {
agreeMC(my_tree$left_arg)
}
# agreement on the right
right_ac <- my_tree$right_arg$Get("ac")[1] %>% str_split(",") %>% unlist()
right_id <- my_tree$right_arg$Get("range_id")[1]
if (any(left_ac %in% head_ft)){
to_removeR <- which(right_ac %in% head_ft)
right_ac <- right_ac[-to_removeR]
my_tree$Set(ac = left_ac, filterFun = function(x){x$range_id == right_id})
agreeMC(my_tree$right_arg)
} else {
agreeMC(my_tree$right_arg)
}
my_tree
} else {
my_tree
}
}
my_tree %>% agreeMC() %>% print("it","lb","ft","ac","is_copy", "range_id","n_dominator")
