df <- my_derivation
df %<>% mutate(harmony = sum(.[4:17,]*weight_solution))
?mutate_at
df %<>% mutate(harmony = mean(.[4:17]*weight_solution))
df <- my_derivation
df %<>% mutate(harmony = mean(.[5:17]*weight_solution))
df <- my_derivation
apply(df, 4:17,function(x) x*weight_solution)
c(1,2,3) * c(1,2,3)
df %<>% mutate(harmony = mean(.[5:17,]*weight_solution))
df <- my_derivation
df %<>% mutate(harmony = mean(5:17*weight_solution))
df <- my_derivation
df %<>% mutate(harmony = mean(df[4:!7,]*weight_solution))
df[4:!7,]*weight_solution
weight_solution
str(weight_solution)
df[4:!7,]
df[4:17,]
df[,4:17]
df <- my_derivation
df %<>% mutate(harmony = mean(.[,4:17]*weight_solution))
.[,4:17]*weight_solution
df <- my_derivation
df %<>% mutate(harmony = mean(.[,5:17]*weight_solution))
df[,5:17]*weight_solution
df <- my_derivation
df %<>% mutate(harmony = mean(df[,5:17]*weight_solution))
mean(df[,5:17]*weight_solution)
df <- my_derivation
mean(df[,5:17]*weight_solution)
df[,5:17]*weight_solution
df <- my_derivation
df %<>% mutate(harmony = rowMeans(df[,5:17]*weight_solution))
df$harmony[8]
df$harmony[1]
weight_solution
colnames(df)
df <- my_derivation
df %<>% mutate(harmony = rowMeans(df[,5:17]*weight_solution))
head(df)
head(df,9)
View(df)
df <- my_derivation
df %<>% mutate_at(vars(5:17), funs(. * weight_solution))
warnings()
df <- my_derivation
df[,5:17]
df[,5:17]* weight_solution
df <- my_derivation
df[,5:17]
length(weight_solution)
length(df[,5:17])
saveRDS(weight_solution, "basic_solution.rds")
library(tidyverse)
library(magrittr)
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
View(df_der)
x <- df_der[,5:17] * solution
View(x)
str(df_der)
solution[13]
df_der[9,5:17] * solution
df_der[,5:17] * solution
x <- apply(df_der,5:17,function(x) x*solution)
df_der
View(df_der)
names(solution) <- NULL
x <- df_der[,5:17] * solution
View(x)
df_der[,5:17]
sweep(df_der[,5:17], MARGIN = 2, solution, '*')
x <- sweep(df_der[,5:17], MARGIN = 2, solution, '*') %>% mutate(harmony= rowMeans(.))
View(x)
x <- sweep(df_der[,5:17], solution, '*') %>% mutate(harmony= rowMeans(.))
?sweep
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowMeans(sweep(.[,5:17], MARGIN = 2, solution, '*')))
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = sweep(.[,5:17], MARGIN = 2, solution, '*') %>% rowMeans(.))
View(df_der)
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = sweep(.[,5:17], MARGIN = 2, solution, '*') %>% colMeans(.))
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = sum(sweep(.[,5:17], MARGIN = 2, solution, '*')))
View(df_der)
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*')))
View(df_der)
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(.[,5:17]*solution))
View(df_der)
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*')))
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F))
View(df_der)
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(is_min & freq == 1, T, F))
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F))
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F)) %>% mutate(is_winner = ifelse(freq==1 & is_min, T, F))
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F))
freq == 1
1 == 1
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F)) %>% mutate(is_winner = ifelse(freq ==1, T,F))
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(freq ==1, T,F))
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(freq ==1, T,F)) %>% subset(is_min != is_winner)
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(freq ==1, T,F))
str(df_der)
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(freq ==1, T,F)) %>% ungroup() %>%
subset(is_min != is_winner)
View(df_der)
library(tidyverse)
library(magrittr)
library(philentropy)
library(optimx)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
current_eval
my_cycle
View(my_derivation)
View(my_cycle)
library(tidyverse)
library(magrittr)
library(philentropy)
library(optimx)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
library(philentropy)
library(optimx)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
last_tree
last_tree %>% cons_marked()
my_tree <- Clone(last_tree)
my_tree$Get("mt_ac")
library(tidyverse)
library(magrittr)
library(philentropy)
library(optimx)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
last_tree
input_tree <- Clone(last_tree)
my_tree <- Clone(input_tree)
head_ac <- my_tree$Get("ac")[1] %>% str_split("-") %>% unlist() # get head ac features
any(head_ac == 1)
head_ac
library(tidyverse)
library(magrittr)
library(philentropy)
library(optimx)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
library(philentropy)
library(optimx)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
# fix repeating inputs
my_result <- dplyr::select(my_derivation, -operation, -cycle_number, frequency = freq)
optimized_der <- weight_optimize(my_result)
weight_solution <- optimized_der$par
weight_solution
names(weight_solution) <- colnames(my_result)[4:16]
weight_solution
saveRDS(my_derivation, "basic_derivationr.rds")
saveRDS(weight_solution, "basic_solution.rds")
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivationr.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(freq ==1, T,F)) %>% ungroup() %>%
subset(is_min != is_winner)
View(df_der)
solution
solution <- readRDS("basic_solution.rds")
solution
library(tidyverse)
library(magrittr)
library(philentropy)
library(optimx)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
source("./machinery2.0/weight_optimizer.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
# fix repeating inputs
my_result <- dplyr::select(my_derivation, -operation, -cycle_number, frequency = freq)
optimized_der <- weight_optimize(my_result)
weight_solution <- optimized_der$par
weight_solution
names(weight_solution) <- colnames(my_result)[4:16]
weight_solution
saveRDS(my_derivation, "basic_derivation.rds")
saveRDS(weight_solution, "basic_solution.rds")
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivation.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %<>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(freq ==1, T,F)) %>% ungroup() %>%
subset(is_min != is_winner) %>% nrow()
library(tidyverse)
library(magrittr)
df_der <- readRDS("basic_derivation.rds")
solution <- readRDS("basic_solution.rds")
names(solution) <- NULL
df_der %>% mutate(harmony = rowSums(sweep(.[,5:17], MARGIN = 2, solution, '*'))) %>% group_by(cycle_number) %>%
mutate(is_min = ifelse(harmony == min(harmony), T, F), is_winner = ifelse(freq ==1, T,F)) %>% ungroup() %>%
subset(is_min != is_winner) %>% nrow()
