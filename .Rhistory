library(tidyverse)
install.packages("pkgdown")
install.packages("textshaping", dependencies = TRUE)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(xtable)
library(vtree)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(xtable)
source("harmonic_syntax.R")
dt <- import_numeration("./numerations/basic_numeration.csv")
draw_tree2 <- function(my_tree){
feat_names <- c("case","foc","wh")
if(isLeaf(my_tree)){
# Leaf node
written <- paste0(my_tree$it,
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ft, "-"))==1) ~ paste0("_f:", paste(feat_names[which(unlist(str_split(my_tree$ft, "-"))==1)], collapse = ",")),
T ~ ""),
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ac, "-"))==1) ~ paste0("_a:", paste(feat_names[which(unlist(str_split(my_tree$ac, "-"))==1)], collapse = ",")),
T ~ ""))
} else {
# Non-leaf node
left_str <- draw_tree(my_tree$left_arg)
right_str <- draw_tree(my_tree$right_arg)
written <- paste0(ifelse(my_tree$it == 0, "",
ifelse(my_tree$is_copy == 1, paste0(my_tree$it,"c"), my_tree$it)),
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ft, "-")) ==1) ~ paste0("_f:", paste(feat_names[which(unlist(str_split(my_tree$ft, "-"))==1)], collapse = ",")),
T ~ ""),
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ac, "-"))==1) ~ paste0("_a:", paste(feat_names[which(unlist(str_split(my_tree$ac, "-"))==1)], collapse = ",")),
T ~ ""),
"[", left_str, " ", right_str,"]")
}
print(written)
}
Merge(dt[[1]]) %>% .[[1]]
Merge(dt[[1]]) %>% .[[1]] %T>% draw_tree2() %>%
Label()
Merge(dt[[1]]) %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
Merge() %>% .[[1]] %T>% draw_tree2()
Merge(dt[[1]]) %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
Merge() %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2()
Merge(dt[[1]]) %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
Merge() %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>% get_subtrees()
dt[[1]]$left_arg$lb
dt[[1]]$left_arg$lb %in% c(0)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)
library(optimx)       # minimizing optimizer function
library(philentropy)  # KL calculating function
library(xtable)
source("harmonic_syntax.R")
dt <- import_numeration("./numerations/basic_numeration.csv")
draw_tree2 <- function(my_tree){
feat_names <- c("case","foc","wh")
if(isLeaf(my_tree)){
# Leaf node
written <- paste0(my_tree$it,
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ft, "-"))==1) ~ paste0("_f:", paste(feat_names[which(unlist(str_split(my_tree$ft, "-"))==1)], collapse = ",")),
T ~ ""),
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ac, "-"))==1) ~ paste0("_a:", paste(feat_names[which(unlist(str_split(my_tree$ac, "-"))==1)], collapse = ",")),
T ~ ""))
} else {
# Non-leaf node
left_str <- draw_tree(my_tree$left_arg)
right_str <- draw_tree(my_tree$right_arg)
written <- paste0(ifelse(my_tree$it == 0, "",
ifelse(my_tree$is_copy == 1, paste0(my_tree$it,"c"), my_tree$it)),
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ft, "-")) ==1) ~ paste0("_f:", paste(feat_names[which(unlist(str_split(my_tree$ft, "-"))==1)], collapse = ",")),
T ~ ""),
case_when(my_tree$is_copy == 1 ~ "",
any(unlist(str_split(my_tree$ac, "-"))==1) ~ paste0("_a:", paste(feat_names[which(unlist(str_split(my_tree$ac, "-"))==1)], collapse = ",")),
T ~ ""),
"[", left_str, " ", right_str,"]")
}
print(written)
}
# a function to extract subtrees of a tree, recursive, same label is skipped
get_subtrees <- function(input_tree, stash = integer()){
my_tree <- Clone(input_tree)
my_nodes <- list()
if (my_tree$isLeaf){ # if it is a leaf
if (my_tree$lb %in% stash){
# do nothing if the label is in stash
} else {
# update stash
stash %<>% append(my_tree$lb)
# return item if not in stash
return(my_nodes)
}
} else {
if (my_tree$lb %in% stash){
# do nothing if the label is in stash
} else {
# update stash
stash %<>% append(my_tree$lb)
# add new node
my_nodes %<>% append(Clone(my_tree)$Set(name = "left_arg", filterFun = isRoot))
}
if (my_tree$left_arg$lb %in% stash){
# do nothing if the label is in stash
} else {
# update stash
stash %<>% append(my_tree$left_arg$lb)
# add new node
my_nodes %<>% append(Clone(my_tree$left_arg)$Set(name = "left_arg", filterFun = isRoot))
}
if (my_tree$right_arg$lb %in% stash){
# do nothing if the label is in stash
} else {
# update stash
stash %<>% append(my_tree$right_arg$lb)
# add new node
my_nodes %<>% append(Clone(my_tree$right_arg)$Set(name = "left_arg", filterFun = isRoot))
}
return(append(my_nodes, get_subtrees(my_tree$left_arg, stash)) %>% append(get_subtrees(my_tree$right_arg, stash)))
}
}
Merge(dt[[1]]) %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
Merge() %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>% get_subtrees()
Merge(dt[[1]]) %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
Merge() %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
get_subtrees() %>% lapply(print("it"))
Merge(dt[[1]]) %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
Merge() %>% .[[1]] %T>% draw_tree2() %>%
Label() %>% .[[1]] %T>% draw_tree2() %>%
get_subtrees() %>% lapply(function(x) print(x,"it"))
