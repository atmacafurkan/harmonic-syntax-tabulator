my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>%
lapply(function(i) print(i,"n_dominator","range_id","gen","it","lb","ft","ac","exnum","is_copy"))
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% Label() %T>%
print("n_dominator","range_id","gen","it","lb","ft","ac","exnum","is_copy")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% Label()
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label()
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>%
print("n_dominator","range_id","gen","it","lb","ft","ac","exnum","is_copy")
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[1]]
my_tree$output_num
my_tree$left_arg$output_num
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[1]]
my_tree$output_num
my_tree$left_arg$output_num
my_tree$right_arg$output_num
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[1]]
my_tree$output_num
my_tree$left_arg$output_num
my_tree$right_arg$output_num
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[1]]
my_tree$output_num
my_tree$left_arg$output_num
my_tree$right_arg$output_num
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[1]]
my_tree$output_num
my_tree$left_arg$output_num
my_tree$right_arg$output_num
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge()
library(shiny); runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
install.packages("DiagrammeR")
runApp('TabulatorInterface.R')
install_version("DiagrammeR", version = "1.0.1", repos = "http://cran.us.r-project.org")
install.packages("devtools")
runApp('TabulatorInterface.R')
?grVizOutput
??grVizOutput
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]]) %>% lapply(function(i) print(i, "gen","it","lb"))
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>%
lapply(function(i) print(i, "gen","it","lb"))
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]]) %>% lapply(function(i) print(i, "gen","it","lb"))
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]]) %>% lapply(function(i) print(i, "gen","it","lb"))
Merge(my_num[[1]])[[1]]$eval
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>%
lapply(function(i) print(i, "gen","it","lb"))
source("~/Desktop/harmonic-syntax-tabulator/developing.R")
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
?saveRDS
runApp('TabulatorInterface.R')
?read_csv
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
import_numeration(numerations[1])
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
View(my_num)
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>%
lapply(function(i) print(i, "gen","it","lb"))
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>%
lapply(function(i) print(i, "gen","it","lb","mc","ac"))
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(shiny)
library(DiagrammeR)
if (interactive()) {
# interface of the app
frontend <- fluidPage(
# Application title
titlePanel("Harmonic Syntax"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Copy the line below to make a file upload manager
fileInput("numeration_file", label = h4("Select numeration")),
hr(),
fluidRow(column(4, textOutput("file_read"))),
numericInput("winner", label = h4("Optimal output?"), value = 100),
actionButton("proceed", label = "Next Cycle"),
grVizOutput("tree"),
br(),
img(src = "uni_leipzig_logo_v2.svg", height = 142, width = 338),
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("eval")
)
)
)
# generating output
backend <- function(input, output, session) {
# new functions for harmonic syntax
source("./harmonic_syntax.R")
file_path <- eventReactive(input$numeration_file, {
my_num <- import_numeration(input$numeration_file$datapath)
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
print("Numeration created!")
})
# read the numeration file
output$file_read <- renderPrint({file_path()})
# remove the file reader and import indicator
observeEvent(input$proceed, {
removeUI(
selector = "div:has(> #numeration_file)"
)
})
# a reactive value that reads the latest tree and displays the evaluation
selected_winner <- eventReactive(input$proceed, {
my_tree <- readRDS("my_tree.rds")
my_outputs <- fn_cycle(my_tree)
if (input$winner < 100){ # if it is not the first step of the derivation, save the winner for next cycle
my_tree <- my_outputs[[input$winner]]
saveRDS(my_tree, "my_tree.rds")
my_derivation <- readRDS("my_derivation.rds") %>% append(my_outputs[[input$winner]])
saveRDS(my_derivation, "my_derivation.rds")
}
my_tree <- readRDS("my_tree.rds")
my_outputs <- fn_cycle(my_tree)
my_eval <- sapply(my_outputs, function(i) i$eval) %>% t() %>% as.data.frame() %>% rownames_to_column(var = "candidate")
my_eval
})
# assign the reactive value to the output
output$eval <- renderTable({selected_winner()}, digits = 0, spacing = "xs")
# a reactive value that reads the latest tree and displays evaluation
selected_tree <- eventReactive(input$proceed,{
my_tree <- readRDS("my_tree.rds")
fn_plotter(my_tree)
})
output$tree <- renderGrViz({selected_tree()})
}
shinyApp(ui = frontend, server = backend)
}
library(shiny)
library(DiagrammeR)
if (interactive()) {
# interface of the app
frontend <- fluidPage(
# Application title
titlePanel("Harmonic Syntax"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Copy the line below to make a file upload manager
fileInput("numeration_file", label = h4("Select numeration")),
hr(),
fluidRow(column(4, textOutput("file_read"))),
numericInput("winner", label = h4("Optimal output?"), value = 100),
actionButton("proceed", label = "Next Cycle"),
grVizOutput("tree"),
br(),
img(src = "uni_leipzig_logo_v2.svg", height = 142, width = 338),
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("eval")
)
)
)
# generating output
backend <- function(input, output, session) {
# new functions for harmonic syntax
source("./harmonic_syntax.R")
file_path <- eventReactive(input$numeration_file, {
my_num <- import_numeration(input$numeration_file$datapath)
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
print("Numeration created!")
})
# read the numeration file
output$file_read <- renderPrint({file_path()})
# remove the file reader and import indicator
observeEvent(input$proceed, {
removeUI(
selector = "div:has(> #form-group shiny-input-container)"
)
})
# a reactive value that reads the latest tree and displays the evaluation
selected_winner <- eventReactive(input$proceed, {
my_tree <- readRDS("my_tree.rds")
my_outputs <- fn_cycle(my_tree)
if (input$winner < 100){ # if it is not the first step of the derivation, save the winner for next cycle
my_tree <- my_outputs[[input$winner]]
saveRDS(my_tree, "my_tree.rds")
my_derivation <- readRDS("my_derivation.rds") %>% append(my_outputs[[input$winner]])
saveRDS(my_derivation, "my_derivation.rds")
}
my_tree <- readRDS("my_tree.rds")
my_outputs <- fn_cycle(my_tree)
my_eval <- sapply(my_outputs, function(i) i$eval) %>% t() %>% as.data.frame() %>% rownames_to_column(var = "candidate")
my_eval
})
# assign the reactive value to the output
output$eval <- renderTable({selected_winner()}, digits = 0, spacing = "xs")
# a reactive value that reads the latest tree and displays evaluation
selected_tree <- eventReactive(input$proceed,{
my_tree <- readRDS("my_tree.rds")
fn_plotter(my_tree)
})
output$tree <- renderGrViz({selected_tree()})
}
shinyApp(ui = frontend, server = backend)
}
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
?str_replace
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% plot()
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% fn_plotter()
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %>% fn_plotter()
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %>% fn_plotter()
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %>% fn_plotter()
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %>% fn_plotter()
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %T>% fn_plotter() %>%
print("range_d")
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %T>% fn_plotter() %>%
print("range_id")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %T>% fn_plotter()
my_tree$left_arg$exnum
my_tree
my_tree$left_arg$exnum == 1
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %T>% fn_plotter()
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %T>% fn_plotter()
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]] %T>% fn_plotter()
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
my_tree <- Merge(my_num[[1]])[[1]] %>% Label() %>% Merge() %>% .[[1]] %>% Label() %>% Merge() %>% .[[5]]
fn_plotter(my_tree)
library(shiny); runApp('TabulatorInterface.R')
