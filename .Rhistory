subset(agree_feats !="")
my_tree$Get("is_copy", filterFun = isLeaf)
tibble(agree_feats = my_tree$Get("ac", filterFun = isLeaf), # extract agreement features of leafs
dom_counts = my_tree$Get("n_dominator", filterFun = isLeaf),
copy = my_tree$Get("is_copy", filterFun = isLeaf)) %>% # get is_copy info
mutate(agree_feats = ifelse(copy > 0, "", agree_feats))
feat_order <- c("foc","wh","case")
n_trial <- tibble(marked_feats = my_tree$Get("ft", filterFun = isLeaf), # extract features of leafs
dom_counts = my_tree$Get("n_dominator", filterFun= isLeaf), # get domination counts
copy = my_tree$Get("is_copy", filterFun = isLeaf)) %>% # get is_copy info
mutate(marked_feats = ifelse(copy > 0, "", marked_feats)) %>% # remove features if leaf is_copy
subset(marked_feats != "") # remove empty rows
n_trial
tibble(marked_feats = my_tree$Get("ft", filterFun = isLeaf), # extract features of leafs
dom_counts = my_tree$Get("n_dominator", filterFun= isLeaf), # get domination counts
copy = my_tree$Get("is_copy", filterFun = isLeaf)) %>% # get is_copy info
mutate(marked_feats = ifelse(copy > 0, "", marked_feats))
tibble(marked_feats = my_tree$Get("ft", filterFun = isLeaf), # extract features of leafs
dom_counts = my_tree$Get("n_dominator", filterFun= isLeaf), # get domination counts
copy = my_tree$Get("is_copy", filterFun = isLeaf)) %>% # get is_copy info
mutate(marked_feats = ifelse(copy > 0, "", marked_feats)) %>% # remove features if leaf is_copy
subset(marked_feats != "")
tibble(marked_feats = my_tree$Get("ft", filterFun = isLeaf), # extract features of leafs
dom_counts = my_tree$Get("n_dominator", filterFun= isLeaf), # get domination counts
copy = my_tree$Get("is_copy", filterFun = isLeaf)) %>% # get is_copy info
mutate(marked_feats = ifelse(copy > 0, "", marked_feats))
print(my_tree, "ac","ft","lb","mc","mc_vio","n_dominator", "is_copy")
my_tree$Get("is_copy")
my_tree$Get("n_dominator")
my_tree$Get("n_dominator")*my_tree$Get("is_copy")
my_tree$Get("n_dominator")*my_tree$Get("is_copy") %>% sum()
my_tree$Get("n_dominator")*my_tree$Get("is_copy")
sum(my_tree$Get("n_dominator")*my_tree$Get("is_copy"))
sum(my_tree$Get("n_dominator")*my_tree$Get("is_copy"))
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
base_der <- mergeMC("V",numeration = df)
print(base_der, "mc","ac","ft","lb","mc","m_vio","n_dominator", "is_copy")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
print(output, "mc","ac","ft","lb","mc","m_vio","n_dominator", "is_copy")
my_list <- list()
moveMC(output)
new_ish <- Clone(my_list[[4]]) %>% labelMC() %>% mergeMC("T",df) %>% labelMC()
print(new_ish, "ac","ft","lb","mc","mc_vio","n_dominator", "is_copy")
my_tree <- Clone(new_ish)
print(my_tree, "ac","ft","lb","mc","mc_vio","n_dominator", "is_copy")
new_ish %>% cons_merge()
new_ish %>% cons_agree()
new_ish %>% cons_lab()
new_ish %>% cons_marked()
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
#source("./machinery2.0/updated_cyclic_operator.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
View(df)
base_der <- mergeMC("V","DP1",numeration = df)
print(base_der, "mc","ac","ft","lb","mc","m_vio","n_dominator", "is_copy")
library(tidyverse)
library(magrittr)
source("./machinery/draw_trees.R")
source("./machinery/cyclic_operator.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
#source("./machinery2.0/updated_cyclic_operator.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
winner_output == 100
my_cycle <- cycle_step(dt_trial, df)
my_cycle <- cycle_step(dt_trial, df)
library(tidyverse)
library(magrittr)
source("./machinery/draw_trees.R")
source("./machinery/cyclic_operator.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
#source("./machinery2.0/updated_cyclic_operator.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
ycle_step(dt_trial, df)
cycle_step(dt_trial, df)
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
base_der <- mergeMC("V",numeration = df)
print(base_der, "mc","ac","ft","lb","mc","m_vio","n_dominator", "is_copy")
output <- mergeMC("DP1","V",df) %>% labelMC() %>% mergeMC("v",df) %>% labelMC()
print(output, "mc","ac","ft","lb","mc","m_vio","n_dominator", "is_copy")
my_list <- list()
moveMC(output)
my_list
View(my_list)
my_list[[1]]
length(my_list)
cycle_numeration <- df
nrow(cycle_numeration)
df[1,2]
View(df)
df[1,3]
df[-1,]
library(tidyverse)
library(magrittr)
source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
winner_output == 100
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
base_der <- mergeMC("V",numeration = df) %>% labelMC()
print(base_der, "it","mc","ac","ft","lb","mc","m_vio","n_dominator", "is_copy")
library(tidyverse)
library(magrittr)
library(data.tree)
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
base_der <- mergeMC("DP1","V",numeration = df) %>% labelMC()
print(base_der, "it","mc","ac","ft","lb","mc","m_vio","n_dominator", "is_copy")
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_trees")
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex")
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex")
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
new_tree <- Clone(dt_trial)
my_tree <- Clone(dt_trial)
# label and return
new_tree <- Clone(my_tree) %>% labelMC()
new_tree2 <- Clone(my_tree)
any(new_tree$Get("name") != new_tree2$Get("name"), na.rm = T)
new_tree2
new_tree
dt_trial %>% labelMC()
dt_trial %>% labelMC() %>% print("lb")
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
View(df)
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[-1:2,]
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
View(df)
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
library(tidyverse)
library(magrittr)
#source("./machinery/draw_trees.R")
source("./machinery2.0/updated_gen_functions.R")
source("./machinery2.0/updated_eval_functions.R")
source("./machinery2.0/updated_cyclic_operator.R")
source("./machinery2.0/updated_draw_latex.R")
df <- read.csv("basic_numeration.csv", na.strings = "NA") %>%
mutate(mc = ifelse(is.na(mc), "", mc))
dt_trial <- mergeMC("DP1","V", numeration = df)
df <- df[c(-1,-2),]
print(dt_trial,"lb")
winner_output <- 100
my_derivation <- tibble()
last_tree <- list()
last_numeration <- list()
count <- 0
v_phased <- 0
while(winner_output != 0){
if (winner_output == 100){
my_cycle <- cycle_step(dt_trial, df)
}else{
my_cycle <- cycle_step(my_cycle[[winner_output]]$tree, my_cycle[[winner_output]]$numeration)
}
current_eval <- prepare_tableau(my_cycle)
View(current_eval)
winner_output <- readline(prompt = "Winner output: ");
winner_output %<>% as.integer()
if(winner_output !=0){
count <- count+1
current_eval$cycle_number <- count
current_eval %<>% set_winner(winner_output)
my_derivation %<>% rbind(current_eval)
last_tree <- my_cycle[[winner_output]]$tree
last_numeration <- my_cycle[[winner_output]]$numeration}
}
View(df)
