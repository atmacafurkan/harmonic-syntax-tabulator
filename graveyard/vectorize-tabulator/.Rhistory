# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
input_numeration <- my_num
my_tree <- Clone(trial)
which(input_numeration %in% my_tree$leaves)
which(input_numeration == my_tree$leaves)
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]])
trial$pass_numeration <- my_num
trial$pass_numeration
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[-c(1,i)]})
my_num[-i]
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[-i]})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[[-i]]})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])
i$output_numeration <- my_num[[-1]]})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$output_numeration <- my_num[[-1]]}))
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$output_numeration <- my_num[[-1]])})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[[-1]]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-1]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-c(1,i)]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-i]))})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(Merge(i, my_num[[1]]),
i$Set(output_num = my_num[-1]))})
comnbine_2[[1]]$output_num
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
c(i$Set(output_num = my_num[-1]), Merge(i, my_num[[1]])
)})
comnbine_2[[1]]$output_num
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){Merge(i, my_num[[1]])})
comnbine_2[[1]]$output_num
comnbine_2[[1]]$mc
comnbine_2[[1]]$it
comnbine_2[[1]]
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
i$Set(output_numn = my_num[-1]) %>%
Merge(i, my_num[[1]])})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
i$Set(output_num = my_num[-1]) %>%
Merge(i, my_num[[1]])})
# merge all the possible phrases from the numeration for the first step
comnbine_2 <- lapply(my_num[-1], function(i){
Merge(i, my_num[[1]])})
comnbine_2[[1]]$it
# add output numeration to each tree
combine_1 <- lapply(my_num, function(i){Set(i, output_num = my_num[-i])})
?Setg
?Set
# add output numeration to each tree
combine_1 <- lapply(my_num, function(i) Set(i, output_num = my_num[-i]))
lapply(my_num, function(i) i$range_id)
# add output numeration to each tree
combine_1 <- lapply(my_num, function(i) i$Set(output_num = my_num[[-i]]))
?seq_along
seq_along()
seq_along(my_num)
lapply(seq_along(my_num), function(i) my_num[i]$range_id)
lapply(seq_along(my_num), function(i) my_num[[i]]$range_id)
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$Set(output_num = my_num[[-i]]))
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$trial <- "x")
my_num[[3]]$trial
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$trial <- ifelse(i>1,"y","x"))
my_num[[3]]$trial
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$trial <- ifelse(i>3,"y","x"))
my_num[[3]]$trial
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$output_num <- my_num[[-i]])
my_num[[-1]]
my_num[-1]
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$output_num <- my_num[-i])
combine[[1]]$it
combine_1[[1]]$it
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
# bake numeration
bake_numeration <- function(left_arg, right_arg, numeration){
my_tree <- Merge(left_arg, right_arg)
my_tree$output_num <- numeration[[]]
}
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") #%>%
#Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
#Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$output_num <- my_num[-i])
View(combine_1)
combine_1[[1]]
combine_1[[2]]
combine_1[[3]]
combine_1[[4]]
library(tidyverse)
library(magrittr)
library(rlang)
library(philentropy)  # KL function
library(optimx)       # optimizing function
library(data.tree)    # data trees
# use old functions until renewed
source("./machinery2.0/updated_draw_latex.R")
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
# bake numeration
bake_numeration <- function(left_arg, right_arg, numeration){
my_tree <- Merge(left_arg, right_arg)
my_tree$output_num <- numeration[[]]
}
trial <- Merge(my_num[[1]], my_num[[2]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[3]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
Merge(my_num[[6]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") #%>%
#Merge(my_num[[4]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum") %>%
#Merge(my_num[[5]]) %>% Label() %T>% print("lb","it","mc","ft","ac","exnum")
View(my_num)
# add output numeration to each tree
combine_1 <- lapply(seq_along(my_num), function(i) my_num[[i]]$Set("output_num" = my_num[-i]))
View(combine_1)
combine_1[[1]]
combine_1[[1]]$it
combine_1[[1]]$output_num
combine_1[[1]]$output_num$it
combine_1[[1]]$output_num[1]
library(shiny); runApp('TABULATOR-INTERFACE.R')
install.packages("ggraph")
library(shiny); runApp('TabulatorInterface.R')
?bindEvent
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(igraph)
library(ggraph)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_num[[1]]
my_num[[1]] %>% fn_draw()
library(shiny); runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
new_nodes <- fn_cycle(my_num[[1]])
new_nodes
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
x <- plot(my_num[[1]])
install.packages("DiagrammeR")
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
x <- plot(my_num[[1]])
str(x)
plot(my_num[[1]])
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
fn_renamer <- function(input_tree){
my_tree <- Clone(input_tree)
my_tree$Set(name = my_tree$Get("it"))
my_plot <- plot(my_tree)
my_plot
}
fn_renamer(my_num[[1]])
x <- fn_renamer(my_num[[1]])
str(x)
vignette('applications', package = "data.tree")
install.packages("DiagrammeRsvg")
export_svg(x)
DiagrammeRsvg::export_svg(x)
?export_svg
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
fn_renamer <- function(input_tree){
my_tree <- Clone(input_tree)
my_tree$Set(name = my_tree$Get("it"))
my_plot <- plot(my_tree)
my_plot
}
x <- fn_renamer(my_num[[1]])
x
str(x)
install.packages("rsvg")
install.packages("rsvg")
install.packages("rsvg")
install.packages("rsvg")
clear
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
fn_renamer <- function(input_tree){
my_tree <- Clone(input_tree)
my_tree$Set(name = my_tree$Get("it"))
my_plot <- plot(my_tree)
my_plot
}
x <- fn_renamer(my_num[[1]])
str(x)
x %>% export_svg() %>%
read_xml() %>%
write_xml("graph.svg")
install.packages("xml2")
export_graph(x,
file_name = "pic.png",
file_type = "png")
x
str(x)
install.packages("vtree")
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
fn_renamer <- function(input_tree){
my_tree <- Clone(input_tree)
my_tree$Set(name = my_tree$Get("it"))
my_plot <- plot(my_tree)
my_plot
}
x <- fn_renamer(my_num[[1]])
str(x)
?grVizToPNG()
grVizToPNG(x, "trial.png")
grVizToPNG(x, width = 100, height = 100, "trial.png")
grVizToPNG(x, width = 100, height = 100)
grVizToPNG(x)
?grVizToPNG
?renderImage
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
fn_plotter(my_num[[1]])
x <- fn_cycle(my_num[[1]]) %>% .[[1]]
x
fn_plotter(x)
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
?grVizOutput
runApp('TabulatorInterface.R')
?grVizToImageFile
runApp('TabulatorInterface.R')
?vtree
?grVizToImageFile
?grViz
?plot
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
x <- fn_cycle(my_num[[1]]) %>% .[[1]] %>% plot()
x
str(x)
x <- fn_cycle(my_num[[1]]) %>% .[[1]] %>% fn_plotter() %>% plot()
fn_cycle(my_num[[1]]) %>% .[[1]] %>% fn_plotter()
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
fn_cycle(my_num[[1]]) %>% .[[1]] %>% fn_plotter()
x <- fn_cycle(my_num[[1]]) %>% .[[1]] %>% fn_plotter() %>% plot()
x
str(x)
?renderGrViz
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
runApp('TabulatorInterface.R')
library(tidyverse)
library(magrittr)
library(rlang)
library(data.tree)    # data trees
library(vtree)
# use old functions until renewed
source("./harmonic_syntax.R")
numerations <- list.files(path="./numerations", pattern = "*.csv", full.names = T)
my_num <- import_numeration(numerations[1])
saveRDS(my_num[[1]], "my_tree.rds")
my_derivation <- my_num[[1]]
saveRDS(my_derivation, "my_derivation.rds")
